---
layout:       post
title:        "5月leetcode"
subtitle:     "May leetcode"
date:         2018-05-18
author:       "Gxm"
header-img:   "img/project.jpg"
header-mask:  0.3
catalog:      true
multilingual: false
tags:
    - leetcode
---

#### 5.28 454. 4Sum II

```
Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.
To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
Example: 
Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0

```
最开始思路：四层遍历，这个肯定是不行的，但是想不到好方法；    
改进思路：看到选取两个遍历，一种分治的做法.     
java版本：写到这里也写不下去了，没有利用好前后两次循环的特点，选取list结构错误。        
```
class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        class sum{
            int index1;
            int index2;
            int sum;
            sum(index1,index2,sum)
            {
                this.index1=index1;
                this.index2=index2;
                this.sum=sum;
            }
        }
        int res=0;
        ArrayList<sum> list=new ArrayList<sum>();
        for(int i=0;i<A.length;i++){
            for(int j=0;j<B.length;j++)
                list.add(new sum(i,j,A[i]+B[j]))
        }
        for(int i=0;i<C.length;i++){
            for(int j=0;j<D.length;j++){
                
            }
                list.add(new sum(i,j,C[i]+D[j]))
        } 
    }
}
```
最终代码：java版本      
```
class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        HashMap<Integer,Integer> ab=new HashMap<Integer,Integer>();
        int res=0;
        for(int i=0;i<A.length;i++){
            for(int j=0;j<B.length;j++){
                ab.put(A[i]+B[j],ab.getOrDefault(A[i]+B[j],0)+1);
            }         
        }
        for(int i=0;i<C.length;i++){
            for(int j=0;j<D.length;j++){
                Integer temp=C[i]+D[j];
                temp=0-temp;
                res+=ab.getOrDefault(temp,0);
            }              
        } 
        return res;
    }
}
```
最终代码：C++版本       


#### 5.29 412. Fizz Buzz
```
Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.
Example:
n = 15,
Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
]
```

java 版本：（知识点：java里面的String对象, int2str）
```
class Solution {
    public List<String> fizzBuzz(int n) {
        ArrayList<String> re = new ArrayList<String>();
        for(int i=1;i<=n;i++)
        {
            if(i%3==0 && i%5 == 0){
                re.add("FizzBuzz");
            }else if(i%3==0){
                re.add("Fizz");
            }else if(i%5==0){
                re.add("Buzz");
            }else re.add(String.valueOf(i));
        
        }
        return re;
    }
}
```

C++ 版本：(知识点: c++ string, int2str, vector)
```
class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> re;
        for(int i=1;i<=n;i++)
        {
            if(i%3==0 && i%5 == 0){
                re.push_back("FizzBuzz");
            }else if(i%3==0){
                re.push_back("Fizz");
            }else if(i%5==0){
                re.push_back("Buzz");
            }else re.push_back(std::to_string(i));
        
        }
        return re;
    }
};
```